name: Deploy to Discodeit for AWS

on:
  push:
    branches: [ release ]

env:
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REPOSITORY_URI: ${{ vars.ECR_REPOSITORY_URI }}
        run: |
          chmod +x ./gradlew
          ./gradlew bootJar
          docker build --platform linux/amd64 \
            -t $ECR_REPOSITORY_URI:$IMAGE_TAG \
            -t $ECR_REPOSITORY_URI:latest .
          
          docker push $ECR_REPOSITORY_URI:$IMAGE_TAG
          docker push $ECR_REPOSITORY_URI:latest
          
          echo "image=$ECR_REPOSITORY_URI:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials for ECS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: discodeit-app
          # 새로 빌드된 이미지 URL (이전 단계의 출력값 사용)
          image: ${{ needs.build-and-push.outputs.image }}
          # (보안!) GitHub Secrets에서 정의한 애플리케이션 레벨의 환경변수들을 동적으로 주입
          environment-variables: |
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_KEY }}

      - name: Stop existing ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ vars.ECS_CLUSTER }} \
            --service ${{ vars.ECS_SERVICE }} \
            --desired-count 0
          
          aws ecs wait services-stable \
            --cluster ${{ vars.ECS_CLUSTER }} \
            --services ${{ vars.ECS_SERVICE }}

      - name: Register new task definition
        id: register-task
        run: |
          echo "TASK_DEF_ARN=${{ steps.task-def.outputs.task-definition }}" >> $GITHUB_ENV

      - name: Deploy updated task definition
        run: |
          aws ecs update-service \
            --cluster ${{ vars.ECS_CLUSTER }} \
            --service ${{ vars.ECS_SERVICE }} \
            --task-definition $TASK_DEF_ARN \
            --desired-count 1